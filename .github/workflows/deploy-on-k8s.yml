name: Deploy to Scaleway Kapsule

on:
  push:
    branches:
      - 74-kube-deploy

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production # Optional: Define a production environment in GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          registry: rg.fr-par.scw.cloud/${{secrets.SCW_PROJECT_ID}} # Adjust registry URL if needed
          username: nologin
          password: ${{ secrets.SCW_SECRET_KEY }}

      # Build and push images for each service
      #- name: Build and push API image
      #  uses: docker/build-push-action@v5
      #  with:
      #    context: ./services/api
      #    push: true
      #    tags: rg.fr-par.scw.cloud/${{ secrets.SCW_PROJECT_ID }}/revision-ai/api:${{ github.sha }}

      #- name: Build and push File Parser image
      #  uses: docker/build-push-action@v5
      #  with:
      #    context: ./services/file-parser
      #    push: true
      #    tags: rg.fr-par.scw.cloud/${{ secrets.SCW_PROJECT_ID }}/revision-ai/file-parser:${{ github.sha }}

      #- name: Build and push Quiz Generator image
      #  uses: docker/build-push-action@v5
      #  with:
      #    context: ./services/quiz-generator
      #    push: true
      #    tags: rg.fr-par.scw.cloud/${{ secrets.SCW_PROJECT_ID }}/revision-ai/quiz-generator:${{ github.sha }}

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config

      - name: Apply Kubernetes ConfigMap
        run: kubectl apply -f k8s/configs/env-config-map.yml

      # Create/Update Kubernetes Secret from GitHub Secrets
      # This is a safer way than putting secrets in YAML files directly in the repo
      # @TODO : exutter a la main
      # - name: Apply Kubernetes Secret
      #  run: |
      #    kubectl create secret generic env-secrets --dry-run=client -o yaml \
      #      --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" \
      #      --from-literal=SCALEWAY_ACCESS_KEY="${{ secrets.SCALEWAY_ACCESS_KEY }}" \
      #      --from-literal=SCALEWAY_ACCESS_KEY_ID="${{ secrets.SCALEWAY_ACCESS_KEY_ID }}" \
      #      --from-literal=SCALEWAY_BUCKET_URL="${{ secrets.SCALEWAY_BUCKET_URL }}" \
      #      --from-literal=SCALEWAY_IA_API_URL="${{ secrets.SCALEWAY_IA_API_URL }}" \
      #      --from-literal=MONGO_URI="${{ secrets.MONGO_URI }}" \
      #      --from-literal=RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}" \
      #      --from-literal=STRIPE_PUBLIC_KEY="${{ secrets.STRIPE_PUBLIC_KEY }}" \
      #      --from-literal=STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
      #      --from-literal=STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
      #      | kubectl apply -f -
      - name: Set up Helm
        uses: azure/setup-helm@v3
          
      # Apply other Kubernetes manifests (Operators, RabbitMQ, MongoDB, Services, Ingress)
      # Note: Operators (RabbitMQ, MongoDB) might need to be installed manually once or in a separate job
      - name: Apply RabbitMQ and MongoDB manifests
        run: |
          kubectl apply -f https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install prometheus prometheus-community/kube-prometheus-stack
          helm repo add mongodb https://mongodb.github.io/helm-charts
          helm install kubernetes-operator mongodb/mongodb-kubernetes 
          kubectl apply -f k8s/ingress/ingress-controller.yaml

      # Update deployment images and apply deployments, services, ingress
      - name: Update and Apply Deployments, Services, Ingress
        run: |
          IMAGE_TAG=rg.fr-par.scw.cloud/${{ vars.SCW_PROJECT_ID }}/revision-ai

          # Use sed or kustomize to update image tags in deployment files
          # Example using sed (requires GNU sed or equivalent)
          sed -i "s|image: revision-ai/api:latest|image: ${IMAGE_TAG}/api:6be880db29417b678eb96a94fac9297d8591c301|g" k8s/apps/api.deployement.yaml
          sed -i "s|image: revision-ai/file-parser:latest|image: ${IMAGE_TAG}/file-parser:6be880db29417b678eb96a94fac9297d8591c301|g" k8s/apps/file-parser.deployement.yml
          sed -i "s|image: revision-ai/quiz-generator:latest|image: ${IMAGE_TAG}/quiz-generator:6be880db29417b678eb96a94fac9297d8591c301|g" k8s/apps/quiz-generator.deployement.yml

          # Apply updated deployments, services, and ingress
          kubectl apply -f k8s/apps/api.deployement.yaml
          kubectl apply -f k8s/apps/file-parser.deployement.yml
          kubectl apply -f k8s/apps/quiz-generator.deployement.yml
          kubectl apply -f k8s/apps/api.service.yaml
          kubectl apply -f k8s/api-ingress.yaml

      - name: Wait for deployments to be ready
        run: |
          kubectl rollout status deployment/api-deploy --timeout=5m
          kubectl rollout status deployment/file-parser-deploy --timeout=5m
          kubectl rollout status deployment/quiz-generator-deploy --timeout=5m

      - name: Verify Ingress
        run: kubectl get ingress api-ingress