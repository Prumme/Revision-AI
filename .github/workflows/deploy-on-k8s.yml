name: Deploy to Scaleway Kapsule

on:
  push:
    branches:
      - 74-kube-deploy

jobs:
  build_and_push_images:
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        image:
            - api
            - file-parser
            - quiz-generator
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          registry: rg.fr-par.scw.cloud/${{secrets.SCW_PROJECT_ID}} # Adjust registry URL if needed
          username: nologin
          password: ${{ secrets.SCW_SECRET_KEY }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.image }}
          push: true
          target: production
          tags: rg.fr-par.scw.cloud/${{ secrets.SCW_PROJECT_ID }}/revision-ai/${{matrix.image}}:${{github.ref_name}}

  deploy:
    runs-on: ubuntu-latest
    environment: production # Optional: Define a production environment in GitHub
    needs: build_and_push_images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0' # adapte selon ta version

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Decode and configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config   

      - name: Test connection to cluster
        run: kubectl get nodes

       #Apply other Kubernetes manifests (Operators, RabbitMQ, MongoDB, Services, Ingress)
       #Note: Operators (RabbitMQ, MongoDB) might need to be installed manually once or in a separate job
      - name: Apply RabbitMQ and MongoDB manifests
        run: |
          kubectl apply -f https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
          helm repo update
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack
          helm repo add mongodb https://mongodb.github.io/helm-charts || true
          helm upgrade --install kubernetes-operator mongodb/mongodb-kubernetes --namespace mongodb --create-namespace
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.18.0 --set installCRDs=true


      - name : verbose k8s/app dir
        run: |
          echo "Contents of k8s/apps directory:"
          ls -la k8s/apps

      # Update deployment images and apply deployments, services, ingress
      - name: Update and Apply Deployments, Services, Ingress
        run: |
          IMAGE_TAG=rg.fr-par.scw.cloud/${{ secrets.SCW_PROJECT_ID }}/revision-ai
          REF_NAME=${{ github.ref_name }}
          # Use sed or kustomize to update image tags in deployment files
          # Example using sed (requires GNU sed or equivalent)
          sed -i "s|image: revision-ai/api:latest|image: ${IMAGE_TAG}/api:${REF_NAME}|g" k8s/apps/api.deployement.yaml
          sed -i "s|image: revision-ai/file-parser:latest|image: ${IMAGE_TAG}/file-parser:${REF_NAME}|g" k8s/apps/file-parser.deployement.yml
          sed -i "s|image: revision-ai/quiz-generator:latest|image: ${IMAGE_TAG}/quiz-generator:${REF_NAME}|g" k8s/apps/quiz-generator.deployement.yml
          sed -i "s|imagePullPolicy: IfNotPresent|imagePullPolicy: Always|g" k8s/apps/api.deployement.yaml
          sed -i "s|imagePullPolicy: IfNotPresent|imagePullPolicy: Always|g" k8s/apps/file-parser.deployement.yml
          sed -i "s|imagePullPolicy: IfNotPresent|imagePullPolicy: Always|g" k8s/apps/quiz-generator.deployement.yml

          # Apply updated deployments, services, and ingress
          kubectl apply -f k8s -R

      - name: Wait for deployments to be ready
        run: |
            kubectl get deployment api-deploy
            kubectl get deployment file-parser-deploy
            kubectl get deployment quiz-generator-deploy
            
      - name: Verify Ingress
        run: kubectl get ingress api-ingress